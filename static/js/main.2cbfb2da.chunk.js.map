{"version":3,"sources":["Home.js","components/Addcustomer.js","components/Addtraining.js","components/Editcustomer.js","components/Customerlist.js","components/Edittraining.js","components/Traininglist.js","components/Customertraining.js","components/Tcalendar.js","App.js","serviceWorker.js","index.js"],"names":["Title","Typography","Home","level","Addcustomer","props","React","useState","open","setOpen","firstname","lastname","streetaddress","postcode","city","email","phone","customer","setcustomer","handleClose","handleInputChange","event","target","name","value","type","onClick","Dialog","onClose","aria-labelledby","DialogContent","TextField","autoFocus","margin","onChange","e","label","fullWidth","DialogActions","color","saveCustomer","Addtraining","date","duration","activity","id","training","setTraining","dateChange","moment","format","saveTraining","Editcustomer","setCustomer","icon","EditTwoTone","twoToneColor","DialogTitle","updateCustomer","links","href","Customerlist","useEffect","fetchData","fetch","then","response","json","data","content","link","method","headers","body","JSON","stringify","res","catch","err","console","error","columns","Header","block","accessor","sortable","filterable","width","Cell","row","original","showPagination","minRows","Edittraining","updateTraining","Traininglist","DeleteTwoTone","window","confirm","Customertraining","localizer","momentLocalizer","Tcalendar","events","setEvents","map","title","start","Date","end","add","startAccessor","endAccessor","style","height","App","className","theme","mode","defaultSelectedKeys","Item","key","to","exact","path","component","render","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2cbfb2da.chunk.js","sourcesContent":["import React from 'react';\nimport { Typography } from 'antd';\n\nconst { Title } = Typography;\n\nconst Home = () => {\n    return (\n        <div> \n          <Title level={4}>Home</Title>\n          <h2>Haaga-Helia Front end programming SWD4TN026</h2>\n          <h3>Final project: Personal Trainer company needs front end app for their customer database. </h3>\n    </div>\n    );\n  }\n \n\nexport default Home;\n\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport { Typography, Button } from 'antd';\r\n\r\nconst { Title} = Typography;\r\n\r\nexport default function Addcustomer(props){\r\n    const [open, setOpen] = React.useState(false);\r\n    const [customer, setcustomer] = React.useState({\r\n      firstname: '', lastname: '', streetaddress: '', postcode: '', city: '', email: '', phone: ''\r\n    })\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        setcustomer({...customer, [event.target.name]: event.target.value })\r\n    }\r\n\r\n\r\n    const addCustomer = () => {\r\n        props.saveCustomer(customer);\r\n        handleClose();\r\n    }\r\n\r\n    return(\r\n    <div>\r\n        <Button type=\"primary\" onClick={handleClickOpen}>\r\n          Add new customer\r\n        </Button>\r\n        <br /><br />\r\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <center><Title level={4}>New customer</Title></center>\r\n          <DialogContent>\r\n          \r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"firstname\"\r\n              value={customer.firstname}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Firstname\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"lastname\"\r\n              value={customer.lastname}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Lastname\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"streetaddress\"\r\n              value={customer.streetaddress}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Streetaddress\"\r\n              fullWidth\r\n            />\r\n                  <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"postcode\"\r\n              value={customer.postcode}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Postcode\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"city\"\r\n              value={customer.city}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"City\"\r\n              fullWidth\r\n            />\r\n                  <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"email\"\r\n              value={customer.email}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Email\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"phone\"\r\n              value={customer.phone}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Phone\"\r\n              fullWidth\r\n            />\r\n         \r\n          \r\n            </DialogContent>\r\n            <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={addCustomer} color=\"primary\">\r\n              Save\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n    </div>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport moment from 'moment'\r\nimport { Typography, Button } from 'antd';\r\n\r\nconst { Title} = Typography;\r\n\r\nexport default function Addtraining(props){\r\n    const [open, setOpen] = React.useState(false);\r\n    const [training, setTraining] = React.useState({\r\n        date: '', duration: '', activity: '', customer: props.id\r\n    })\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        setTraining({...training, [event.target.name]: event.target.value })\r\n    }\r\n\r\n    const dateChange = date => {\r\n        setTraining({\r\n          ...training,\r\n          date: date\r\n        });\r\n      };\r\n\r\n    const addTraining = () => {\r\n        props.saveTraining(training);\r\n        handleClose();\r\n    }\r\n\r\n    return(\r\n    <div>\r\n        <Button type=\"primary\" onClick={handleClickOpen}>\r\n          Add new training\r\n        </Button>\r\n        <br/><br/>\r\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n        <center><Title level={4}>New training</Title></center>\r\n          <DialogContent>\r\n          \r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"date\"\r\n              value={training.date}\r\n              onChange={date => dateChange(moment(date).format('YYYY-MM-DD'))}\r\n              label=\"Date\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"duration\"\r\n              value={training.duration}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Duration\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"activity\"\r\n              value={training.activity}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Activity\"\r\n              fullWidth\r\n            />\r\n        \r\n            </DialogContent>\r\n            <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={addTraining} color=\"primary\">\r\n              Save\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n    </div>\r\n\r\n    );\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { Button } from 'antd';\r\nimport { EditTwoTone } from '@ant-design/icons';\r\n\r\nexport default function Editcustomer(props){\r\n    const [open, setOpen] = React.useState(false);\r\n    const [customer, setCustomer] = React.useState({\r\n        firstname: '', lastname: '', streetaddress: '', postcode: '', city: '', email: '', phone: ''\r\n    })\r\n\r\n    const handleClickOpen = () => {\r\n        setCustomer({\r\n          firstname: props.customer.firstname, lastname: props.customer.lastname, \r\n          streetaddress: props.customer.streetaddress, postcode: props.customer.postcode,\r\n          city: props.customer.city, email: props.customer.email, phone: props.customer.phone\r\n        })\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        setCustomer({...customer, [event.target.name]: event.target.value })\r\n    }\r\n\r\n    const updateCustomer = () => {\r\n        props.updateCustomer(customer, props.customer.links[0].href);\r\n        handleClose();\r\n    }\r\n\r\n    return(\r\n    <div>\r\n        <Button type=\"text\" icon={<EditTwoTone twoToneColor/>} onClick={handleClickOpen} />\r\n         \r\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n          <DialogTitle id=\"form-dialog-title\">Edit customer</DialogTitle>\r\n          <DialogContent>\r\n   \r\n          \r\n          <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"firstname\"\r\n              value={customer.firstname}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Firstname\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"lastname\"\r\n              value={customer.lastname}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Lastname\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"streetaddress\"\r\n              value={customer.streetaddress}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Streetaddress\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"postcode\"\r\n              value={customer.postcode}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Postcode\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"city\"\r\n              value={customer.city}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"City\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"email\"\r\n              value={customer.email}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Email\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"phone\"\r\n              value={customer.phone}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Phone\"\r\n              fullWidth\r\n            />\r\n            \r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={updateCustomer} color=\"primary\">\r\n              Save\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n    </div>\r\n\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport ReactTable from 'react-table-v6';\r\nimport 'react-table-v6/react-table.css';\r\nimport { Typography, Button} from 'antd';\r\nimport { DeleteTwoTone, PlusCircleTwoTone } from '@ant-design/icons';\r\n\r\nimport Addcustomer from './Addcustomer';\r\nimport Addtraining from './Addtraining';\r\nimport Editcustomer from './Editcustomer';\r\n\r\nconst { Title } = Typography;\r\n\r\nexport default function Customerlist() {\r\n    const [customer, setcustomer] = useState([]);\r\n\r\n    useEffect (() => fetchData(), []);\r\n\r\n    const fetchData = () => {\r\n        fetch('https://customerrest.herokuapp.com/api/customers')\r\n        .then(response => response.json())\r\n        .then(data => setcustomer(data.content));\r\n    }\r\n    \r\n    const deleteCustomer = (link) => {\r\n        if (window.confirm('Are you sure?')){\r\n            fetch(link, {method: 'DELETE'})\r\n            .then(res => fetchData())\r\n            .catch(err => console.error(err))\r\n            }\r\n          }\r\n\r\n    const saveCustomer = (customer) => {\r\n        fetch('https://customerrest.herokuapp.com/api/customers', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(customer)\r\n        })\r\n        .then(res => fetchData())\r\n        .catch(err => console.error(err))\r\n      }\r\n\r\n      const updateCustomer = (customer, link) => {\r\n        fetch(link, {\r\n        method: 'PUT',\r\n        headers : {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(customer)\r\n        })\r\n        .then(res => fetchData())\r\n        .catch(err => console.error(err))\r\n      }\r\n\r\n      const addTraining = (training) => {\r\n        if (window.confirm('Here could be \"Add training to customer\" - function🌚')){\r\n        fetch('https://customerrest.herokuapp.com/api/customers/{id}/trainings', {\r\n            method: 'POST',\r\n            headers: {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(training)\r\n            })\r\n        .catch(err => console.error(err))\r\n        }\r\n      }\r\n\r\n    const columns = [\r\n        {\r\n            Header: props => <Button type=\"primary\" block>First name</Button>,\r\n            accessor: 'firstname'\r\n        },\r\n        {\r\n            Header: props => <Button type=\"primary\" block>Last name</Button>,\r\n            accessor: 'lastname'\r\n        },\r\n        {\r\n            Header: props => <Button type=\"primary\" block>Street address</Button>,\r\n            accessor: 'streetaddress'\r\n        },\r\n        {\r\n            Header: props => <Button type=\"primary\" block>Postcode</Button>,\r\n            accessor: 'postcode'\r\n        },\r\n        {\r\n            Header: props => <Button type=\"primary\" block>City</Button>,\r\n            accessor: 'city'\r\n        },\r\n        {\r\n            Header: props => <Button type=\"primary\" block>E-mail</Button>,\r\n            accessor: 'email'\r\n        },\r\n        {\r\n            Header: props => <Button type=\"primary\" block>Phone</Button>,\r\n            accessor: 'phone'\r\n        },\r\n        {\r\n            sortable: false,\r\n            filterable: false,\r\n            width: 50,\r\n            Cell: row => <Editcustomer updateCustomer={updateCustomer} customer={row.original} />\r\n          },\r\n        {\r\n            sortable: false,\r\n            filterable: false,\r\n            width: 50,\r\n            accessor: 'links[0].href',\r\n            Cell: row =>\r\n            //<Button onClick={() => deleteCustomer(row.value)}>X</Button>\r\n            <Button type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f5222d\" />} onClick={() => deleteCustomer(row.value)} />\r\n          },\r\n          {\r\n            sortable: false,\r\n            filterable: false,\r\n            width: 50,\r\n            accessor: 'links[0].href',\r\n            Cell: row =>\r\n            //<Button onClick={() => addTraining(row.value) }>Add</Button>\r\n            <Button type=\"text\" icon={<PlusCircleTwoTone/>} onClick={() => addTraining(row.value) }/>\r\n          }\r\n    ]\r\n\r\nreturn(\r\n<div>\r\n    <Title level={4}>All customers</Title>\r\n    <Addcustomer saveCustomer={saveCustomer} />\r\n    <ReactTable filterable={true} showPagination={false} minRows ={0} data={customer} columns={columns} />\r\n</div>\r\n);\r\n}","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport moment from 'moment'\r\nimport { Button } from 'antd';\r\nimport { EditTwoTone } from '@ant-design/icons';\r\n\r\nexport default function Edittraining(props){\r\n    const [open, setOpen] = React.useState(false);\r\n    const [training, setTraining] = React.useState({\r\n        date: '', duration: '', activity: ''\r\n    })\r\n\r\n    const handleClickOpen = () => {\r\n        setTraining({\r\n          date: props.training.date,\r\n          duration: props.training.duration,\r\n          activity: props.training.activity\r\n        })\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleInputChange = (event) => {\r\n        setTraining({...training, [event.target.name]: event.target.value })\r\n    }\r\n\r\n    const dateChange = date => {\r\n        setTraining({\r\n          ...training,\r\n          date: date\r\n        });\r\n      };\r\n\r\n    const updateTraining = () => {\r\n        props.updateTraining(training, props.training);\r\n        handleClose();\r\n    }\r\n\r\n    return(\r\n    <div>\r\n        <Button type=\"text\" icon={<EditTwoTone twoToneColor/>} onClick={handleClickOpen} />\r\n      \r\n        <Dialog open={open} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\r\n          <DialogTitle id=\"form-dialog-title\">Edit training</DialogTitle>\r\n          <DialogContent>\r\n   \r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"date\"\r\n              value={training.date}\r\n              onChange={date => dateChange(moment(date).format('YYYY-MM-DD'))}\r\n              label=\"Date\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"duration\"\r\n              value={training.duration}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Duration\"\r\n              fullWidth\r\n            />\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              name=\"activity\"\r\n              value={training.activity}\r\n              onChange={e => handleInputChange(e)}\r\n              label=\"Activity\"\r\n              fullWidth\r\n            />\r\n            \r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={updateTraining} color=\"primary\">\r\n              Save\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n    </div>\r\n\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\r\nimport ReactTable from 'react-table-v6';\r\nimport 'react-table-v6/react-table.css';\r\nimport moment from 'moment'\r\nimport { Typography, Button} from 'antd';\r\nimport { DeleteTwoTone } from '@ant-design/icons';\r\n\r\nimport Addtraining from './Addtraining';\r\nimport Edittraining from './Edittraining';\r\n\r\nconst { Title } = Typography;\r\n  \r\nexport default function Traininglist() {\r\n    const [training, setTraining] = useState([]);\r\n    useEffect (() => fetchData(), []);\r\n\r\n    const fetchData = () => {\r\n        fetch('https://customerrest.herokuapp.com/api/trainings')\r\n        .then(response => response.json())\r\n        .then(data => setTraining(data.content))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    const deleteTraining = (link) => {\r\n        if (window.confirm('Are you sure?')){\r\n        fetch(link, {method: 'DELETE'})\r\n        .then(res => fetchData())\r\n        .catch(err => console.error(err))\r\n        }\r\n      }\r\n\r\n    const saveTraining = (training) => {\r\n        fetch('https://customerrest.herokuapp.com/api/trainings', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n              body: JSON.stringify(training)\r\n            })\r\n        .then(res => fetchData())\r\n        .catch(err => console.error(err))\r\n        }\r\n\r\n        const updateTraining = (training, link) => {\r\n            fetch(link, {\r\n            method: 'PUT',\r\n            headers : {'Content-Type': 'application/json'},\r\n            body: JSON.stringify(training)\r\n            })\r\n            .then(res => fetchData())\r\n            .catch(err => console.error(err))\r\n          }\r\n          \r\n\r\n    const columns = [\r\n        {\r\n            Header: props => <Button type=\"primary\" block>Date</Button>,\r\n            accessor: 'date',\r\n            Cell: row => moment(row.value).format('DD/MM/YYYY')\r\n        },\r\n        {\r\n            Header: props => <Button type=\"primary\" block>Duration</Button>,\r\n            accessor: 'duration',\r\n        },\r\n        {\r\n            Header: props => <Button type=\"primary\" block>Activity</Button>,\r\n            accessor: 'activity'\r\n        },\r\n        {\r\n            sortable: false,\r\n            filterable: false,\r\n            width: 50,\r\n            Cell: row => <Edittraining updateTraining={updateTraining} training={row.original} />\r\n          },\r\n        {\r\n            sortable: false,\r\n            filterable: false,\r\n            width: 50,\r\n            accessor: 'links[0].href',\r\n            Cell: row => \r\n           <Button type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f5222d\" />} onClick={() => deleteTraining(row.value)} />\r\n        }\r\n    ]\r\n\r\nreturn(\r\n<div>\r\n    <Title level={4}>Trainings</Title>\r\n    <Addtraining saveTraining={saveTraining} />\r\n    <ReactTable filterable={true} showPagination={false} minRows ={0} data={training} columns={columns} />\r\n</div>\r\n);\r\n}\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport ReactTable from 'react-table-v6';\r\nimport 'react-table-v6/react-table.css';\r\nimport moment from 'moment'\r\nimport { Typography, Button} from 'antd';\r\n//import { DeleteTwoTone } from '@ant-design/icons';\r\n\r\n// import Addtraining from './Addtraining';\r\n// import Edittraining from './Edittraining';\r\n\r\nconst { Title } = Typography;\r\n  \r\nexport default function Customertraining() {\r\n    const [training, setTraining] = useState([]);\r\n    useEffect (() => fetchData(), []);\r\n\r\n    const fetchData = () => {\r\n        fetch('https://customerrest.herokuapp.com/gettrainings')\r\n        .then(response => response.json())\r\n        .then(data => setTraining(data))\r\n        .catch(err => console.error(err))\r\n    }\r\n\r\n    /*{const deleteTraining = (link) => {\r\n        if (window.confirm('Are you sure?')){\r\n        fetch('https://customerrest.herokuapp.com/api/trainings/{id}', {method: 'DELETE'})\r\n        .then(res => fetchData())\r\n        .catch(err => console.error(err))\r\n        }\r\n      }\r\n\r\n    const saveTraining = (training) => {\r\n        fetch('https://customerrest.herokuapp.com/customers/{id}/trainings', {\r\n            method: 'POST',\r\n            headers: {\r\n            'Content-Type': 'application/json'\r\n            },\r\n              body: JSON.stringify(training)\r\n            })\r\n        .then(res => fetchData())\r\n        .catch(err => console.error(err))\r\n        }\r\n\r\n        const updateTraining = (training) => {\r\n        fetch('https://customerrest.herokuapp.com/customers/{id}/trainings', {\r\n            method: 'PUT',\r\n            headers : {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(training)\r\n            })\r\n            .then(res => fetchData())\r\n            .catch(err => console.error(err))\r\n          }\r\n        }*/\r\n     \r\n    const columns = [\r\n        {\r\n            Header: props => <Button type=\"primary\" block>Date</Button>,\r\n            accessor: 'date',\r\n            Cell: row => moment(row.value).format('DD/MM/YYYY')\r\n        },\r\n        {\r\n            Header: props => <Button type=\"primary\" block>Customer</Button>,\r\n            accessor: 'customer.firstname'\r\n        },\r\n        {\r\n            Header: props => <Button type=\"primary\" block>Duration</Button>,\r\n            accessor: 'duration',\r\n         \r\n        },\r\n        {\r\n            Header: props => <Button type=\"primary\" block>Activity</Button>,\r\n            accessor: 'activity'\r\n        },\r\n        // Doesn't work\r\n        /*{ \r\n            sortable: false,\r\n            filterable: false,\r\n            width: 50,\r\n            Cell: row => <Edittraining updateTraining={updateTraining} training={row.original} />\r\n          },\r\n        {\r\n            sortable: false,\r\n            filterable: false,\r\n            width: 50,\r\n            accessor: '/customers/{id}',\r\n            Cell: row => \r\n           <Button type=\"text\" icon={<DeleteTwoTone twoToneColor=\"#f5222d\" />} onClick={() => deleteTraining(row.value)} />\r\n           \r\n        }*/\r\n    ]\r\n\r\nreturn(\r\n<div>\r\n    <Title level={4}>Trainings with customers</Title>\r\n    <ReactTable filterable={true} showPagination={false} minRows ={0} data={training} columns={columns} />\r\n</div>\r\n);\r\n}\r\n\r\n\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Calendar, momentLocalizer } from \"react-big-calendar\";\r\nimport \"react-big-calendar/lib/css/react-big-calendar.css\";\r\nimport moment from 'moment'\r\n\r\nconst localizer = momentLocalizer(moment);\r\n\r\nconst Tcalendar = () => {\r\n  const [events, setEvents] = useState([]);\r\n  useEffect(() => fetchData(), []);\r\n\r\n  const fetchData = () => {\r\n    fetch(`https://customerrest.herokuapp.com/gettrainings`)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        return setEvents(\r\n          data.map(event => ({\r\n            title: event.activity + (\" : \") + event.customer.firstname + (\" \") + event.customer.lastname,\r\n            // ^ This isn't work if someone adds the training without the customer.\r\n            start: new Date(event.date),\r\n            end: new Date(moment(event.date).add(event.duration, \"minutes\"))\r\n          }))\r\n        );\r\n      });\r\n  };\r\n\r\n  return ( \r\n    <div>\r\n    <Calendar localizer = {localizer}\r\n    events = {events}\r\n    startAccessor = \"start\"\r\n    endAccessor = \"end\"\r\n    style = {{height: \"85vh\"}}\r\n    /> </div>\r\n  );\r\n};\r\nexport default Tcalendar;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\";\nimport Home from './Home';\nimport Customerlist from './components/Customerlist';\nimport Traininglist from './components/Traininglist';\nimport Customertraining from './components/Customertraining';\nimport 'antd/dist/antd.css';\nimport { Menu, Typography } from 'antd';\nimport Tcalendar from './components/Tcalendar';\n\nconst { Title } = Typography;\n\nfunction App() {\n  return (\n   <div className=\"App\">\n     \n<BrowserRouter>\n  <div> \n    <Title level={2}>Personal trainer</Title>\n      <header className=\"App-header\">\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['']} >\n            <Menu.Item key=\"1\"><Link to = \"/\"  >Home</Link>{' '}</Menu.Item>\n            <Menu.Item key=\"2\"><Link to = \"/components/Customerlist\">All customers</Link>{' '}</Menu.Item>\n            <Menu.Item key=\"3\"><Link to = \"/components/Traininglist\">Trainings</Link>{' '}</Menu.Item>\n            <Menu.Item key=\"4\"><Link to = \"/components/Customertraining\">Trainings with customers</Link>{' '}</Menu.Item>\n            <Menu.Item key=\"5\"><Link to = \"/components/Tcalendar\">Calendar</Link>{' '}</Menu.Item>\n        </Menu>\n      </header>\n\n      <Switch>\n        <Route exact path = \"/\" component = {Home}/>\n        <Route path = \"/components/Customerlist\" component = {Customerlist}/>\n        <Route path = \"/components/Traininglist\" component = {Traininglist}/>\n        <Route path = \"/components/Customertraining\" component = {Customertraining}/>\n        <Route path = \"/components/Tcalendar\" component = {Tcalendar}/>\n        <Route render = {() => <Title level={2}>Page not found</Title>}/>\n      </Switch>\n    </div>\n  </BrowserRouter>\n  </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\n   ReactDOM.render(<App />, document.getElementById('root'));\n  \nserviceWorker.unregister();\n"],"sourceRoot":""}